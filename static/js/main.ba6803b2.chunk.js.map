{"version":3,"sources":["components/board.js","tools.js","components/footer.js","App.js","reportWebVitals.js","index.js"],"names":["randomInt","min","max","Math","floor","random","randomCell","seed","not","GRID_SIZE","includes","DIRECTIONS","DIRECTION_VECTORS","0","dRow","dCol","1","2","3","OPPOSITE_DIRECTIONS","DIRECTION_ROTATIONS","Board","useState","Array","fill","map","row","board","snake","setSnake","food","setFood","score","setScore","dead","setDead","allowInput","useRef","direction","queueDirection","NaN","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","moveSnake","window","addEventListener","e","handleKeydown","console","log","head","nextHead","nextHeadIndex","isNaN","die","newSnake","pop","length","handleDirQueue","inputDirection","key","handleDirInput","opposite","setTimeout","restart","headIndex","moveDirection","col","computeCellClass","index","computeCellStyle","transform","className","onClick","rowIndex","cell","colIndex","style","Footer","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba6803b2.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { useInterval } from \"../tools\";\r\n\r\nconst GRID_SIZE = 9;\r\nconst UPDATE_INTERVAL = 250;\r\nconst RESTART_WAIT = 1000;\r\n\r\nfunction randomInt(min, max) {\r\n\t// generate random integer between min and max incl.\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst randomCell = (not = []) => {\r\n\tlet seed;\r\n\tdo {\r\n\t\tseed = randomInt(0, GRID_SIZE * GRID_SIZE - 1);\r\n\t} while (not.includes(seed));\r\n\r\n\treturn seed;\r\n};\r\n\r\nconst DIRECTIONS = {\r\n\tup: 0,\r\n\tright: 1,\r\n\tdown: 2,\r\n\tleft: 3,\r\n};\r\n\r\nconst DIRECTION_VECTORS = {\r\n\t0: { dRow: -1, dCol: 0 },\r\n\t1: { dRow: 0, dCol: 1 },\r\n\t2: { dRow: 1, dCol: 0 },\r\n\t3: { dRow: 0, dCol: -1 },\r\n};\r\n\r\nconst OPPOSITE_DIRECTIONS = {\r\n\t0: DIRECTIONS.down,\r\n\t1: DIRECTIONS.left,\r\n\t2: DIRECTIONS.up,\r\n\t3: DIRECTIONS.right,\r\n};\r\n\r\nconst DIRECTION_ROTATIONS = {\r\n\t0: 0,\r\n\t1: 90,\r\n\t2: 180,\r\n\t3: -90,\r\n};\r\n\r\nconst Board = () => {\r\n\tconst [board] = useState(\r\n\t\tnew Array(GRID_SIZE).fill(0).map((row) => new Array(GRID_SIZE).fill(0))\r\n\t);\r\n\tconst [snake, setSnake] = useState([randomCell()]);\r\n\tconst [food, setFood] = useState(randomCell(snake));\r\n\tconst [score, setScore] = useState(0);\r\n\r\n\tconst [dead, setDead] = useState(false);\r\n\r\n\tconst allowInput = useRef(true);\r\n\tconst direction = useRef(randomInt(0,3));\r\n\tconst queueDirection = useRef(NaN);\r\n\r\n\t// update if still alive\r\n\tuseInterval(\r\n\t\t() => {\r\n\t\t\tmoveSnake();\r\n\t\t},\r\n\t\tdead ? null : UPDATE_INTERVAL\r\n\t);\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"keydown\", (e) => {\r\n\t\t\thandleKeydown(e);\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst moveSnake = () => {\r\n\t\tconsole.log(\"Moving Snake\");\r\n\r\n\t\tallowInput.current = true;\r\n\r\n\t\t// calculate next head position\r\n\t\tlet head = snake[0];\r\n\t\tlet nextHead = nextHeadIndex(head, direction.current);\r\n\r\n\t\tif (isNaN(nextHead)) {\r\n\t\t\t// out of bounds\r\n\t\t\treturn die();\r\n\t\t}\r\n\r\n\t\t// add next position\r\n\t\tlet newSnake = [nextHead, ...snake];\r\n\r\n\t\tif (nextHead === food) {\r\n\t\t\t// landing on food\r\n\t\t\tconsole.log(\"EAT!\");\r\n\t\t\tsetFood(randomCell(newSnake));\r\n\t\t} else {\r\n\t\t\t// no food: remove final element\r\n\t\t\tnewSnake.pop();\r\n\t\t}\r\n\r\n\t\t// if on self\r\n\t\tif (snake.includes(nextHead)) {\r\n\t\t\treturn die();\r\n\t\t}\r\n\r\n\t\t// update snake\r\n\r\n\t\tsetSnake(newSnake);\r\n\r\n\t\t// update score\r\n\t\tsetScore((newSnake.length - 1) * 10);\r\n\r\n\t\thandleDirQueue();\r\n\t};\r\n\r\n\tconst handleKeydown = (e) => {\r\n\t\tlet inputDirection;\r\n\r\n\t\tswitch (e.key) {\r\n\t\t\tcase \"ArrowRight\":\r\n\t\t\tcase \"d\":\r\n\t\t\t\tinputDirection = DIRECTIONS.right;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowLeft\":\r\n\t\t\tcase \"a\":\r\n\t\t\t\tinputDirection = DIRECTIONS.left;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowUp\":\r\n\t\t\tcase \"w\":\r\n\t\t\t\tinputDirection = DIRECTIONS.up;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowDown\":\r\n\t\t\tcase \"s\":\r\n\t\t\t\tinputDirection = DIRECTIONS.down;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!allowInput.current) {\r\n\t\t\tqueueDirection.current = inputDirection;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\thandleDirInput(inputDirection);\r\n\t};\r\n\r\n\tconst handleDirInput = (inputDirection) => {\r\n\t\tlet opposite = OPPOSITE_DIRECTIONS[direction.current];\r\n\t\tif (\r\n\t\t\tdirection.current === inputDirection ||\r\n\t\t\topposite === inputDirection\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdirection.current = inputDirection;\r\n\t\tallowInput.current = false;\r\n\t};\r\n\tconst handleDirQueue = () => {\r\n\t\tif (isNaN(queueDirection.current)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\thandleDirInput(queueDirection.current);\r\n\t\tqueueDirection.current = NaN;\r\n\t};\r\n\r\n\tconst die = () => {\r\n\t\tsetDead(true);\r\n\t\tsetTimeout(restart, RESTART_WAIT);\r\n        queueDirection.current = NaN;\r\n\t};\r\n\tconst restart = () => {\r\n\t\tlet newSnake = [randomCell()];\r\n\t\tsetSnake(newSnake);\r\n\t\tsetFood(randomCell(newSnake));\r\n\r\n\t\tsetScore(0);\r\n\t\tdirection.current = randomInt(0,3);\r\n\r\n\t\tsetDead(false);\r\n\t};\r\n\r\n\tconst nextHeadIndex = (headIndex, moveDirection) => {\r\n\t\tlet row = Math.floor(headIndex / GRID_SIZE);\r\n\t\tlet col = headIndex % GRID_SIZE;\r\n\r\n\t\tconst { dRow, dCol } = DIRECTION_VECTORS[moveDirection];\r\n\r\n\t\trow += dRow;\r\n\t\tcol += dCol;\r\n\r\n\t\tif (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) {\r\n\t\t\treturn NaN;\r\n\t\t}\r\n\r\n\t\treturn row * GRID_SIZE + col;\r\n\t};\r\n\r\n\tconst computeCellClass = (row, col) => {\r\n\t\tlet index = row * GRID_SIZE + col;\r\n\r\n\t\treturn food === index\r\n\t\t\t? \"food\" // food\r\n\t\t\t: !snake.includes(index)\r\n\t\t\t? \"\" // not snake (or food)\r\n\t\t\t: index !== snake[0]\r\n\t\t\t? \"snake-body\" // not head\r\n\t\t\t: dead\r\n\t\t\t? \"snake-dead\" // dead head\r\n\t\t\t: \"snake-head\"; // normal head\r\n\t};\r\n\r\n\tconst computeCellStyle = (row, col) => {\r\n\t\tlet index = row * GRID_SIZE + col;\r\n\r\n\t\tif (index !== snake[0]) {\r\n\t\t\t// not head\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttransform: `rotate(${DIRECTION_ROTATIONS[direction.current]}deg)`,\r\n\t\t};\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"board\" onClick={moveSnake}>\r\n\t\t\t<h1>Score: {score}</h1>\r\n\t\t\t{board.map((row, rowIndex) => (\r\n\t\t\t\t<div key={rowIndex} className=\"row\">\r\n\t\t\t\t\t{row.map((cell, colIndex) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tkey={colIndex}\r\n\t\t\t\t\t\t\tclassName={`cell ${computeCellClass(\r\n\t\t\t\t\t\t\t\trowIndex,\r\n\t\t\t\t\t\t\t\tcolIndex\r\n\t\t\t\t\t\t\t)}`}\r\n\t\t\t\t\t\t\tstyle={computeCellStyle(rowIndex, colIndex)}\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n","\r\nimport {useRef, useEffect} from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }","\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            Created using React by Tom Wright &copy; 2021. <a href=\"http://www.github.com/tomnwright/react-snake-game\">Github Repo</a>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import \"./App.css\";\nimport Board from \"./components/board\"\nimport Footer from \"./components/footer\"\nfunction App() {\n  return (\n    <>\n    <div className=\"App\">\n      <Board />\n      <p>Use the arrow keys to move the snake.</p>\n    </div>\n    <Footer />\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}